name: CI

on:
  push:
    branches: [ main ]
    tags-ignore: [ '**' ]

env:
  CARGO_TERM_COLOR: always
  GROONGA_VERSION: 12.0.8

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y \
            wget \
            tar \
            pkg-config \
            clang-14 \
            build-essential \
            zlib1g zlib1g-dev \
            liblz4-1 \
            liblz4-dev \
            libzstd1 \
            libzstd-dev \
            libmpack0 \
            libmsgpack-dev \
            libzmq5 \
            libzmq3-dev \
            libevent-dev \
            libmecab-dev

    - name: Install Groonga (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd "`mktemp -d`"
        wget https://packages.groonga.org/source/groonga/groonga-${GROONGA_VERSION}.tar.gz
        tar zxf groonga-${GROONGA_VERSION}.tar.gz
        cd groonga-${GROONGA_VERSION}
        ./configure --with-zlib --with-lz4 --with-zstd
        make -j$(grep '^processor' /proc/cpuinfo | wc -l)
        sudo make install
        echo "LD_LIBRARY_PATH=/usr/local/lib" >> $GITHUB_ENV

    - name: Install Groonga (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        curl.exe -f -v -o groonga-${env:GROONGA_VERSION}-x64-vs2022.zip https://packages.groonga.org/windows/groonga/groonga-${env:GROONGA_VERSION}-x64-vs2022.zip
        Expand-Archive -Path groonga-${env:GROONGA_VERSION}-x64-vs2022.zip -DestinationPath groonga-${env:GROONGA_VERSION}
        $groonga_home = Join-Path -Path (Get-Location) -ChildPath groonga-${env:GROONGA_VERSION} | Join-Path -ChildPath groonga-${env:GROONGA_VERSION}-x64-vs2022
        Write-Output "GROONGA_HOME=$groonga_home" >> $env:GITHUB_ENV
        Write-Output "PATH=${env:PATH};$groonga_home\bin" >> $env:GITHUB_ENV

    - name: Check format
      if: matrix.os == 'ubuntu-latest'
      run: cargo fmt --all --check

    - name: Check lint
      if: matrix.os == 'ubuntu-latest'
      run: |
        cargo clippy --fix
        git diff --exit-code --quiet

    - name: Run tests
      env:
        RUSTFLAGS: '-C instrument-coverage'
      run: cargo test --verbose

    - name: Generate coverage report (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      env:
        RUSTFLAGS: '-C instrument-coverage'
      run: |
        rustup component add llvm-tools-preview
        dotnet tool install -g dotnet-reportgenerator-globaltool

        TARGET_HOST=$(rustup show active-toolchain | sed -e 's/[^-]*-\(.*\)\s.*/\1/')
        TEST_BIN=$(cargo test --no-run 2>&1 | grep Executable | cut -d '(' -f 2 | cut -d ')' -f 1)

        $(rustc --print sysroot)/lib/rustlib/${TARGET_HOST}/bin/llvm-profdata merge \
            -sparse groonga-sys/default_*.profraw \
            -o default.profdata

        $(rustc --print sysroot)/lib/rustlib/${TARGET_HOST}/bin/llvm-cov export \
            --ignore-filename-regex='library/std/src' \
            --ignore-filename-regex='cargo/registry/src' \
            --object=${TEST_BIN} \
            --instr-profile=default.profdata \
            --format=lcov \
            > coverage.lcov

        reportgenerator -reports:coverage.lcov -targetdir:"./artifacts" -reporttypes:"MarkdownSummaryGithub;TextSummary"

        $(rustc --print sysroot)/lib/rustlib/${TARGET_HOST}/bin/llvm-cov report \
            --ignore-filename-regex='library/std/src' \
            --ignore-filename-regex='cargo/registry/src' \
            --object=${TEST_BIN} \
            --instr-profile=default.profdata \
            > Summary.txt

        cat Summary.txt

    - name: Generate coverage report (Windows)
      if: matrix.os == 'windows-latest'
      env:
        RUSTFLAGS: '-C instrument-coverage'
      run: |
        rustup component add llvm-tools-preview
        dotnet tool install -g dotnet-reportgenerator-globaltool

        $TARGET_HOST = $(rustup show active-toolchain) -replace '[^-]*-(?<host>.*)\s.*', '${host}'
        $TEST_BIN = ($(cargo test --no-run 2>&1) |? { "$_" -like '*Executable*' }) -replace '.*\((?<path>.*)\).*', '${path}'

        & "$(rustc --print sysroot)\lib\rustlib\${TARGET_HOST}\bin\llvm-profdata.exe" merge `
            -sparse groonga-sys\default_*.profraw `
            -o default.profdata

        & "$(rustc --print sysroot)\lib\rustlib\${TARGET_HOST}\bin\llvm-cov.exe" export `
            --ignore-filename-regex='library\\std\\src' `
            --ignore-filename-regex='cargo\\registry\\src' `
            --object=${TEST_BIN} `
            --instr-profile=default.profdata `
            --format=lcov `
            > coverage.lcov

        reportgenerator -reports:coverage.lcov -targetdir:".\artifacts" -reporttypes:"MarkdownSummaryGithub;TextSummary"

        & "$(rustc --print sysroot)\lib\rustlib\${TARGET_HOST}\bin\llvm-cov.exe" report `
            --ignore-filename-regex='library\\std\\src' `
            --ignore-filename-regex='cargo\\registry\\src' `
            --object=${TEST_BIN} `
            --instr-profile=default.profdata `
            > Summary.txt

        Get-Content .\Summary.txt

    - name: Report coverage (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cat "./artifacts/Summary.txt"
        cat "./artifacts/SummaryGithub.md" > $GITHUB_STEP_SUMMARY

    - name: Report coverage (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Get-Content ".\artifacts\Summary.txt"
        Get-Content ".\artifacts\SummaryGithub.md" > $env:GITHUB_STEP_SUMMARY
